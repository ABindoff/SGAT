\documentclass[a4paper]{article}
\usepackage{a4wide}
\usepackage[authoryear]{natbib}
\usepackage{amsmath}

\SweaveOpts{engine=R, eps=FALSE, keep.source = FALSE}
%\VignetteIndexEntry{Sensitivity analysis for threshold based Geolocation}
%\VignetteDepends{geosphere,SGAT}
%\VignettePackage{SGAT}
%\VignetteKeyword{Geolocation}
\begin{document}

\title{Geolocation Sensitivity Analysis}
\date{2013}
\author{\textbf{Simeon Lisovski} \\
%EndAName
Centre for Integrative Ecology\\
Deakin University\\
\and \textbf{Michael Sumner} \\
%EndAName
Australian Antarctic Division\\
\and \textbf{Simon Wotherspoon} \\
%EndAName
Australian Antarctic Division,\\
Institute for Marine and Antarctic Studies\\
University of Tasmania}
\maketitle

\begin{abstract}
  The \textbf{SGAT} package provides facilities for Geolocation
  estimation.  This document demonstrates a sensitivity analysis for
  threshold based geolocation that allows for both errors in the
  estimated times of twilight and motion of the tag.
\end{abstract}


\section{Introduction}
\label{sec:introduction}

This document describes the implementation of a Metropolis sampler to
estimate location from a single sunrise/sunset pair by a threshold
method, allowing for errors in the estimated times of twilight and
assuming the tagged individual moves over the day.  The purpose is
twofold.
\begin{itemize}
\item Standard threshold methods assume that the tagged individual is
  stationary between twilights and that times of twilight are known
  precisely.  This technique relaxes those assumptions and can be used
  to provide a sensitivity analysis on the location estimates determined
  by \textbf{GeoLight}.
\item This technique can be viewed as an extremely simple variant of
  TripEstimation based on the threshold method, and is an important
  precursor to a more general algorithm.
\end{itemize}

\section{Overview}
\label{sec:overview}

Given the times of a single sunrise and sunset pair, the method
estimates the location of the tagged animal at sunrise and at sunset
assuming that during this time the animal moves no further than a
maximum range $M$, and that the observed times of sunrise and sunset
contain an additive log Normally distributed error with known mean and
variance. These errors are directed so that observed sunrise occurs
earlier than true sunrise, and the observed sunset occurs later than
true sunrise.

The method is implemented as a Metropolis sampler that draws samples
from the joint distribution of the sunrise and sunset locations of the
animal. The sunset and sunrise positions are updated separately.  At
each iteration the next sample in the chain is generated as follows.
For both sunrise and sunset,
\begin{enumerate}
\item a new location is proposed based on the current estimate,
\item if distance between the new proposal and the position of the
  animal at the other twilight exceeds $M$ the proposed point is not
  accepted and the algorithm proceeds to the next iteration, otherwise
\item the expected time of twilight at the proposed location is
  computed and the log posterior density is calculated based on the
  expected and observed times of twilight,
\item the Metropolis rule is used to calculate the acceptance
  probability $\alpha$ based on the posterior density at the current
  and proposed locations, and
\item the proposal is accepted with probability $\alpha$ and the
  algorithm proceeds to the next iteration.
\end{enumerate}

It is slightly expensive to compute the time of sunrise or sunset for a
given location; it is much more efficient to calculate the time of
sunrise or sunset in solar time, which differs from GMT by a small
correction factor that varies over the year. Instead of calculating
the time errors in GMT, observed times of sunrise and sunset are
converted to solar time and all calculations are performed in solar
time.

Simply limiting the distance travelled in a day is equivalent to
imposing a uniform $\operatorname{U}[0,M]$ distribution on the
distance travelled.  More complex assumptions could easily be imposed.

\section{Implementation}
\label{sec:implementation}

The Metropolis sampler is implemented by \texttt{threshold.sensitivity} in
the \texttt{SGAT} package
<<>>=
## Implementation of the sampler
library(SGAT)
threshold.sensitivity
@
The user must supply:
\begin{itemize}
\item \texttt{rise}, \texttt{set}: the observed times of sunrise and sunset.
\item \texttt{zenith}: the sun's zenith angle at twilight
\item \texttt{range}: the maximum range of travel $M$.
\item \texttt{sr.mulog},\texttt{sr.sdlog},\texttt{sr.mulog},\texttt{sr.sdlog}:
  the parameters of the Log Normal distributions governing the error
  in the observed twilights.
\item \texttt{sr.proposal}, \texttt{ss.proposal}: functions of a
  single argument that draw samples from the proposal distributions
  for the positions at sunrise and sunset.
\item \texttt{n.thin}, \texttt{n.iters}: rate at which to thin the
  chain and the number of samples to draw.
\end{itemize}

The chain is initialized from the standard threshold position
estimate \texttt{p0}, and thinned to reduce autocorrelation in the
samples. The samples are returned as two arrays representing the
samples of locations for sunrise and sunset.

The function allows the user to specify an arbitrary proposal
distribution, but bivariate Normal proposals seem to work well in
practice. The function \texttt{mvnorm} can be used to generated a
function to sample from a bivariate Normal distribution with a given
covariance.


\section{Example}
\label{sec:example}

First compute the sunrise and sunset times for a known location and date
<<>>=
## Sunrise and sunset at known time/location
lon <- -119.7022
lat <- 34.4191
day <- as.POSIXct("2013-04-08","GMT")
rise <- sunrise(day,lon,lat)
set <- sunset(day,lon,lat)
@

Define initial proposal distributions
<<>>=
## Initial choice of proposals
sr.proposal <- mvnorm(diag(c(0.3,0.3)^2))
ss.proposal <- mvnorm(diag(c(0.3,0.3)^2))
@
run the sampler
<<>>=
## Trial run
fit <- threshold.sensitivity(
  rise,set,range=200,
  sr.mulog=0.8,sr.sdlog=1.0,ss.mulog=0.8,ss.sdlog=1.0,
  sr.proposal=sr.proposal,
  ss.proposal=ss.proposal,
  n.iters=200,n.thin=50)
@
and plot the chains to assess convergence (Figure~\ref{fig:run1}).
<<label=run1,eval=F>>=
## Assess mixing
opar <- par(mfrow=c(2,1),mar=c(3,5,2,1)+0.1)
matplot(scale(fit$rise,scale=F),type="l",lty=1,col=c(2,4),
        ylab="rise",main="First Run")
matplot(scale(fit$set,scale=F),type="l",lty=1,col=c(2,4),
        ylab="set")
par(opar)
@
If the initial covariance is set too large, the chains will never
move.
\begin{figure}[ht]
  \centering
<<fig=T,echo=F>>=
<<run1>>
@
  \caption{Trace of the first run.}
  \label{fig:run1}
\end{figure}

The covariance of the proposal distributions is tuned based on the
observed covariance in the chain
<<>>=
## Update proposal
sr.proposal <- mvnorm(S=cov(fit$rise),s=0.4)
ss.proposal <- mvnorm(S=cov(fit$set),s=0.4)
@
the sampler is re-run
<<>>=
## Re-run sampler
fit <- threshold.sensitivity(
  rise,set,range=200,
  sr.mulog=0.8,sr.sdlog=1.0,ss.mulog=0.8,ss.sdlog=1.0,
  sr.proposal=sr.proposal,
  ss.proposal=ss.proposal,
  n.iters=200,n.thin=50)
@
and again the chains are plotted to assess convergence (Figure~\ref{fig:run2}).
<<label=run2,eval=F>>=
## Re-assess mixing
opar <- par(mfrow=c(2,1),mar=c(3,5,2,1)+0.1)
matplot(scale(fit$rise,scale=F),type="l",lty=1,col=c(2,4),
        ylab="rise",main="Second Run")
matplot(scale(fit$set,scale=F),type="l",lty=1,col=c(2,4),
        ylab="set")
par(opar)
@
It may be necessary to repeat this procedure several times if the
initial choice of proposal was particularly poor, or thin more
aggressively if the chain mixes slowly.

\begin{figure}[ht]
  \centering
<<fig=T,echo=F>>=
<<run2>>
@
  \caption{Trace of the second run.}
  \label{fig:run2}
\end{figure}


Once satisfactory sample is obtained, a large sample is drawn and the
initial draws are discarded to allow for ``burn-in''
<<>>=
## Run sampler and drop burn-in
fit <- threshold.sensitivity(
  rise,set,range=200,
  sr.mulog=0.8,sr.sdlog=1.0,ss.mulog=0.8,ss.sdlog=1.0,
  sr.proposal=sr.proposal,
  ss.proposal=ss.proposal,
  n.iters=2000,n.thin=50)
fit$rise <- fit$rise[-(1:200),]
fit$set <- fit$set[-(1:200),]
@
The midpoint, and the distance and bearing between the sunrise and
sunset location can be computed with the functions from the
\textbf{geosphere} package
<<>>=
## Compute midpoints, distance and bearing travelled
library(geosphere)
mpts <- midPoint(fit$rise,fit$set)
bs <- bearing(fit$rise,fit$set)
ds <- distCosine(fit$rise,fit$set)/1000
@
The sampled locations can be summarized graphically, either by
plotting the sampled locations directly with some transparency to
allow for overplot (Figure~\ref{fig:ppt})
<<label=ppt,eval=F>>=
## Examine locations
opar <- par(mfrow=c(2,2),mar=c(5,4,1,1)+0.1)
clr <- rgb(0,1,0,0.05)
plot(fit$rise,pch=16,cex=0.5,xlab="Lon",ylab="Lat",main="Sunrise",col=clr)
points(fit$p0[1],fit$p0[2],col="blue",pch=16,cex=0.5)
plot(fit$set,pch=16,cex=0.5,xlab="Lon",ylab="Lat",main="Sunset",col=clr)
points(fit$p0[1],fit$p0[2],col="blue",pch=16,cex=0.5)
plot(mpts,pch=16,cex=0.5,xlab="Lon",ylab="Lat",main="Noon",col=clr)
points(fit$p0[1],fit$p0[2],col="blue",pch=16,cex=0.5)
par(opar)
@
or by constructing kernel density plots.


\begin{figure}[ht]
  \centering
<<fig=T,echo=F>>=
<<ppt>>
@
  \caption{Sampled locations plotted as points.}
  \label{fig:ppt}
\end{figure}

The distribution of the distance and bearing can be explored with
simple histograms (Figure~\ref{fig:dstbr})
<<label=dstbr,eval=F>>=
## Examine distance and bearing
opar <- par(mfrow=c(2,1))
hist(ds,18,main="Distance")
hist(bs,18,main="Bearing")
par(opar)
@
While this seems to suggest that the procedure favours longer
distances travelled, it is important to note that there are
more longer trajectories than shorter trajectories.

\begin{figure}[ht]
  \centering
<<fig=T,echo=F>>=
<<dstbr>>
@
  \caption{Distance and bearing travelled.}
  \label{fig:dstbr}
\end{figure}


\section{Conditioning on Direction}
\label{sec:cond-direct}

As it stands the simulation does not restrict the bearing of travel.
But if, for example, it were thought the animal was travelling South
during this period, we can condition on motions that are broadly
southward.

Determine which tracks are broadly southward
<<>>=
## Keep southward bound excursions
keep <- bs > 3/8*360 & bs < 5/8*360
sum(keep)
@
and examine the distribution of points from these tracks (Figure~\ref{fig:pptsouth})
<<label=pptsouth,eval=F>>=
## Examine locations assuming southward travel
opar <- par(mfrow=c(2,2),mar=c(5,4,1,1)+0.1)
clr <- rgb(0,1,0,0.05)
plot(fit$rise[keep,],pch=16,cex=0.5,xlab="Lon",ylab="Lat",main="Sunrise",col=clr)
points(fit$p0[1],fit$p0[2],col="blue",pch=16,cex=0.5)
plot(fit$set[keep,],pch=16,cex=0.5,xlab="Lon",ylab="Lat",main="Sunset",col=clr)
points(fit$p0[1],fit$p0[2],col="blue",pch=16,cex=0.5)
plot(mpts[keep,],pch=16,cex=0.5,xlab="Lon",ylab="Lat",main="Noon",col=clr)
points(fit$p0[1],fit$p0[2],col="blue",pch=16,cex=0.5)
par(opar)
@
Note that the standard threshold estimate is no longer centred in the
cloud of midpoints, but has a westward bias.
\begin{figure}[ht]
  \centering
<<fig=T,echo=F>>=
<<pptsouth>>
@
  \caption{Sampled locations of southward heading tracks.}
  \label{fig:pptsouth}
\end{figure}

\clearpage
\nocite{Sumner2009}
\nocite{Lisovski2012}
\bibliographystyle{apalike}
\bibliography{SGAT}

\end{document}
